"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/components/Map.tsx":
/*!********************************!*\
  !*** ./app/components/Map.tsx ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _data_healthcareCenters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/healthcareCenters */ \"(app-pages-browser)/./app/data/healthcareCenters.ts\");\n/* harmony import */ var _data_pharmacies__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/pharmacies */ \"(app-pages-browser)/./app/data/pharmacies.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n// Use memo to prevent unnecessary re-renders\nconst MapComponent = /*#__PURE__*/ _s((0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(_c = _s(function MapComponent(param) {\n    let { responses, style, showHealthFacilities = true, showPharmacies = false // Default to not showing pharmacies\n     } = param;\n    _s();\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mapInstanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const facilityMarkersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const pharmacyMarkersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]); // Add ref for pharmacy markers\n    const initialZoomRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(12);\n    const centerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [infoWindow, setInfoWindow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Initialize map only once\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapRef.current || mapInstanceRef.current) return;\n        if (window.google && window.google.maps) {\n            console.log(\"Initializing map instance\");\n            const initialCenter = {\n                lat: 8.87,\n                lng: 7.22\n            }; // Centered on your healthcare facilities area\n            const initialZoom = 12;\n            mapInstanceRef.current = new window.google.maps.Map(mapRef.current, {\n                center: initialCenter,\n                zoom: initialZoom,\n                mapTypeId: window.google.maps.MapTypeId.ROADMAP\n            });\n            // Create info window instance\n            setInfoWindow(new google.maps.InfoWindow());\n            // Store initial settings\n            initialZoomRef.current = initialZoom;\n            centerRef.current = new google.maps.LatLng(initialCenter.lat, initialCenter.lng);\n            // Add listeners to store user map interactions\n            mapInstanceRef.current.addListener(\"zoom_changed\", ()=>{\n                if (mapInstanceRef.current) {\n                    initialZoomRef.current = mapInstanceRef.current.getZoom() || initialZoom;\n                }\n            });\n            mapInstanceRef.current.addListener(\"center_changed\", ()=>{\n                if (mapInstanceRef.current) {\n                    centerRef.current = mapInstanceRef.current.getCenter() || null;\n                }\n            });\n        }\n    }, []);\n    // Add healthcare facilities to the map\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current || !infoWindow) return;\n        // Clear existing facility markers\n        facilityMarkersRef.current.forEach((marker)=>marker.setMap(null));\n        facilityMarkersRef.current = [];\n        // Only add markers if showHealthFacilities is true\n        if (!showHealthFacilities) return;\n        // Create a function to adjust icon size based on zoom\n        const getScaledHealthIcon = ()=>{\n            var _mapInstanceRef_current;\n            const currentZoom = ((_mapInstanceRef_current = mapInstanceRef.current) === null || _mapInstanceRef_current === void 0 ? void 0 : _mapInstanceRef_current.getZoom()) || 12;\n            const baseSize = 16; // Base size at zoom level 12\n            const scaleFactor = Math.max(0.7, (currentZoom - 8) / 4); // Scale formula\n            const size = Math.max(12, Math.round(baseSize * scaleFactor)); // Min size 12px\n            return {\n                url: \"/images/purp.png\",\n                scaledSize: new google.maps.Size(size, size)\n            };\n        };\n        // Add healthcare facility markers\n        _data_healthcareCenters__WEBPACK_IMPORTED_MODULE_2__.healthcareCenters.forEach((facility)=>{\n            if (facility.latitude && facility.longitude) {\n                const marker = new google.maps.Marker({\n                    position: {\n                        lat: facility.latitude,\n                        lng: facility.longitude\n                    },\n                    map: mapInstanceRef.current,\n                    title: facility.name,\n                    icon: getScaledHealthIcon(),\n                    zIndex: 2\n                });\n                // Add click listener to show info about the facility\n                marker.addListener(\"click\", ()=>{\n                    const content = '\\n            <div style=\"padding: 10px; max-width: 300px;\">\\n              <h3 style=\"margin: 0 0 8px 0;\">'.concat(facility.name, '</h3>\\n              <p style=\"margin: 0 0 5px 0;\"><strong>Address:</strong> ').concat(facility.address, '</p>\\n              <p style=\"margin: 0 0 5px 0;\"><strong>Immunization Days:</strong> ').concat(facility.days_of_immunization || \"Not specified\", '</p>\\n              <p style=\"margin: 0 0 5px 0;\"><strong>Hours:</strong> ').concat(facility.hours_of_work || \"Not specified\", \"</p>\\n            </div>\\n          \");\n                    infoWindow.setContent(content);\n                    infoWindow.open(mapInstanceRef.current, marker);\n                });\n                facilityMarkersRef.current.push(marker);\n            }\n        });\n        // Update icon sizes when zoom changes\n        const zoomChangeListener = mapInstanceRef.current.addListener(\"zoom_changed\", ()=>{\n            facilityMarkersRef.current.forEach((marker)=>{\n                marker.setIcon(getScaledHealthIcon());\n            });\n        });\n        // Clean up listener when component unmounts or effect re-runs\n        return ()=>{\n            if (zoomChangeListener) {\n                google.maps.event.removeListener(zoomChangeListener);\n            }\n        };\n    }, [\n        showHealthFacilities,\n        infoWindow\n    ]);\n    // Add pharmacies to the map - NEW EFFECT\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current || !infoWindow) return;\n        // Clear existing pharmacy markers\n        pharmacyMarkersRef.current.forEach((marker)=>marker.setMap(null));\n        pharmacyMarkersRef.current = [];\n        // Only add markers if showPharmacies is true\n        if (!showPharmacies) return;\n        // Custom icon for pharmacies - REDUCED SIZE HERE\n        const pharmacyIcon = {\n            url: \"/images/pharma.png\",\n            scaledSize: new google.maps.Size(20, 20)\n        };\n        // Add pharmacy markers\n        _data_pharmacies__WEBPACK_IMPORTED_MODULE_3__.pharmacies.forEach((pharmacy)=>{\n            if (pharmacy.latitude && pharmacy.longitude) {\n                const marker = new google.maps.Marker({\n                    position: {\n                        lat: pharmacy.latitude,\n                        lng: pharmacy.longitude\n                    },\n                    map: mapInstanceRef.current,\n                    title: pharmacy.name,\n                    icon: pharmacyIcon,\n                    zIndex: 2\n                });\n                // Add click listener to show info about the pharmacy\n                marker.addListener(\"click\", ()=>{\n                    const content = '\\n            <div style=\"padding: 10px; max-width: 300px;\">\\n              <h3 style=\"margin: 0 0 8px 0;\">'.concat(pharmacy.name, '</h3>\\n              <p style=\"margin: 0 0 5px 0;\"><strong>Address:</strong> ').concat(pharmacy.address, '</p>\\n              <p style=\"margin: 0 0 5px 0;\"><strong>LGA:</strong> ').concat(pharmacy.lga || \"Not specified\", \"</p>\\n              \").concat(pharmacy.days_of_immunization ? '<p style=\"margin: 0 0 5px 0;\"><strong>Immunization Days:</strong> '.concat(pharmacy.days_of_immunization, \"</p>\") : \"\", \"\\n              \").concat(pharmacy.hours_of_work ? '<p style=\"margin: 0 0 5px 0;\"><strong>Hours:</strong> '.concat(pharmacy.hours_of_work, \"</p>\") : \"\", \"\\n            </div>\\n          \");\n                    infoWindow.setContent(content);\n                    infoWindow.open(mapInstanceRef.current, marker);\n                });\n                pharmacyMarkersRef.current.push(marker);\n            }\n        });\n    }, [\n        showPharmacies,\n        infoWindow\n    ]); // This effect only runs when showPharmacies changes\n    // Handle response markers separately when responses change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapInstanceRef.current || !responses || !infoWindow) return;\n        // Clear existing response markers\n        markersRef.current.forEach((marker)=>marker.setMap(null));\n        markersRef.current = [];\n        // Custom icon for person markers\n        const personIcon = {\n            url: \"/images/person.png\",\n            scaledSize: new google.maps.Size(24, 24)\n        };\n        // Add new response markers\n        responses.forEach((response)=>{\n            if (response.latitude && response.longitude) {\n                // Create a marker for each response with the person icon\n                const marker = new window.google.maps.Marker({\n                    position: {\n                        lat: response.latitude,\n                        lng: response.longitude\n                    },\n                    map: mapInstanceRef.current,\n                    title: \"Response \".concat(response.id),\n                    icon: personIcon,\n                    zIndex: 1 // Lower z-index than health facilities\n                });\n                // Add click listener to show info about the response\n                marker.addListener(\"click\", ()=>{\n                    const content = '\\n            <div style=\"padding: 10px; max-width: 200px;\">\\n              <h4 style=\"margin: 0 0 5px 0;\">Survey Response</h4>\\n              <p style=\"margin: 0 0 3px 0;\">Ready for vaccine: '.concat(response.ready_for_vaccine || \"Not specified\", \"</p>\\n              \").concat(response.cares_for_girl ? '<p style=\"margin: 0 0 3px 0;\">Cares for girl: Yes</p>' : \"\", \"\\n              \").concat(response.received_hpv_dose ? '<p style=\"margin: 0 0 3px 0;\">Received HPV dose: Yes</p>' : \"\", \"\\n              \").concat(response.joined_whatsapp ? '<p style=\"margin: 0 0 3px 0;\">Joined WhatsApp: Yes</p>' : \"\", \"\\n            </div>\\n          \");\n                    infoWindow.setContent(content);\n                    infoWindow.open(mapInstanceRef.current, marker);\n                });\n                markersRef.current.push(marker);\n            }\n        });\n        // Update bounds calculation with all visible markers\n        const allVisibleMarkers = [\n            ...markersRef.current\n        ];\n        if (showHealthFacilities) {\n            allVisibleMarkers.push(...facilityMarkersRef.current);\n        }\n        if (showPharmacies) {\n            allVisibleMarkers.push(...pharmacyMarkersRef.current);\n        }\n        // Adjust map bounds based on visible markers (as you had before)\n        if (allVisibleMarkers.length > 1) {\n            const bounds = new window.google.maps.LatLngBounds();\n            allVisibleMarkers.forEach((marker)=>{\n                bounds.extend(marker.getPosition());\n            });\n            mapInstanceRef.current.fitBounds(bounds);\n            // Limit maximum zoom\n            setTimeout(()=>{\n                if (mapInstanceRef.current) {\n                    const currentZoom = mapInstanceRef.current.getZoom() || 0;\n                    if (currentZoom > 15) {\n                        mapInstanceRef.current.setZoom(15);\n                    }\n                }\n            }, 100);\n        } else if (allVisibleMarkers.length === 1) {\n            const position = allVisibleMarkers[0].getPosition();\n            if (position) {\n                mapInstanceRef.current.setCenter(position);\n                mapInstanceRef.current.setZoom(14);\n            }\n        } else if (allVisibleMarkers.length === 0 && centerRef.current) {\n            mapInstanceRef.current.setCenter(centerRef.current);\n            mapInstanceRef.current.setZoom(initialZoomRef.current);\n        }\n    }, [\n        responses,\n        showHealthFacilities,\n        showPharmacies,\n        infoWindow\n    ]);\n    // Return just the map div, not the button\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mapRef,\n        style: {\n            width: \"100%\",\n            height: \"100%\",\n            ...style\n        }\n    }, void 0, false, {\n        fileName: \"/Users/drewbernard/Documents/Visual Studio/Engagement Map/next-maps-app/app/components/Map.tsx\",\n        lineNumber: 285,\n        columnNumber: 5\n    }, this);\n}, \"raM6wKn5GG8e9RdivAtMze8/CnA=\")), \"raM6wKn5GG8e9RdivAtMze8/CnA=\");\n_c1 = MapComponent;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MapComponent);\nvar _c, _c1;\n$RefreshReg$(_c, \"MapComponent$memo\");\n$RefreshReg$(_c1, \"MapComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/Map.tsx\n"));

/***/ })

});